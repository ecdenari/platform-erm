@using PureGreenLandGroup.Models.ViewModel.Account
@model DashboardViewModel

<script src="/AdminDashboard/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

<script type="text/javascript">
    // faulty/non-faulty zone pie chart
    if (@Model.FaultyZone == 0 && @Model.NonFaultyZone== 0) {
        //create a default graph
        var zoneFaultOptions = {
            series: [100, 0],
            chart: {
                type: 'donut',
                width: 350,
                height: 400,
            },
            labels: ['Faulty zone', 'Non-faulty zone'],
            fill: {
                colors: ['#B4B4B4', '#B4B4B4'], // #7FBE41-light green, #0F572E-dark green, #B4B4B4-gray
                type: 'solid',
            },
            dataLabels: {
                enabled: false, // show/hide percentage of data
            },
            tooltip: {
                enabledOnSeries: false // Disable hover effect
            },
            responsive: [{
                breakpoint: 480,
                options: {
                    chart: {
                        width: 200
                    },
                }
            }]
        };

        var chart = new ApexCharts(document.querySelector("#ZoneFaultPieChart"), zoneFaultOptions);
        chart.render();
    }
    else {
        var zoneFaultOptions = {
            series: [@Model.FaultyZone, @Model.NonFaultyZone],
            chart: {
                type: 'donut',
                width: 350,
                height: 400,
            },
            labels: ['Faulty zone', 'Non-faulty zone'],
            fill: {
                colors: ['#7FBE41', '#0F572E'],//#7FBE41-light green, #0F572E-dark green, #B4B4B4-gray
                type: 'solid',
            },
            dataLabels: {
                enabled: true,//show/hide percentage of data
                formatter: function (val) {
                    return Math.round(val) + "%"; // Round to the nearest integer
                },
                style: {
                    colors: ['#eef729'], // Change the colors of the data labels text
                },
                minAngleToShowLabel: 0, // Minimum angle required to show the label
            },
            responsive: [{
                breakpoint: 480,
                options: {
                    chart: {
                        width: 200
                    },
                }
            }]
        };

        var chart = new ApexCharts(document.querySelector("#ZoneFaultPieChart"), zoneFaultOptions);
        chart.render();


    }

    // Inspection(Monthly) chart js
    var monthlyInspectionOptions = {
        series: [{
            name: 'Completed',
            data: [@Model.CompletedInspectionOfYear],
            color: '#0F572E'
        }],
        chart: {
            type: 'bar',
            height: 450,
            toolbar: {
                show: false
            },
        },
        legend: {
            position: 'bottom',
        },

        plotOptions: {
            bar: {
                horizontal: false,
                columnWidth: '50%',
                borderRadius: 5,
                borderRadiusApplication: 'end',
            }
        },
        plotOptions: {
            bar: {
                horizontal: false,
                columnWidth: '70%',
                borderRadius: 5,
                borderRadiusApplication: 'end',
            }
        },
        dataLabels: {
            enabled: false
        },
        stroke: {
            show: true,
            width: 2,
            colors: ['transparent']
        },
        xaxis: {
            categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],
        },
        responsive: [
            {
                breakpoint: 480,
            }
        ],
        fill: {
            opacity: 1
        },
        tooltip: {
            y: {
                formatter: function (val) {
                    return + val + " Inspections"
                }
            }
        }
    };

    var chart1 = new ApexCharts(document.querySelector("#MonthlyInspectionsChart"), monthlyInspectionOptions);
    chart1.render();

    //get weekly runtime chart lebels
    const categories = GetLastFourWeeks();

    // Inspection yearly chart
    var weeklyRuntimeChartOptions = {
        series: [{
            name: 'Runtime',
            data: [@Model.WeeklyRuntime],
            color: '#0F572E'
        }],
        chart: {
            type: 'bar',
            height: 450,
            toolbar: {
                show: false
            },
        },
        options: {
            legend: {
                position: 'bottom',
                fontSize: '14px',
            }
        },
        plotOptions: {
            bar: {
                horizontal: false,
                columnWidth: '25%',
                borderRadius: 5,
                borderRadiusApplication: 'end',
            }
        },
        dataLabels: {
            enabled: false
        },
        stroke: {
            show: true,
            width: 2,
            colors: ['transparent']
        },
        xaxis: {
            categories: categories,
        },
        fill: {
            opacity: 1
        },
        tooltip: {
            y: {
                formatter: function (val) {
                    return + val + " Minutes"
                }
            }
        },
    };

    var chart = new ApexCharts(document.querySelector("#WeeklyRuntimeChart"), weeklyRuntimeChartOptions);
    chart.render();


    function GetLastFourWeeks() {
        const currentDate = new Date();
        const currentYear = currentDate.getFullYear();
        const currentMonth = currentDate.getMonth();
        const currentDay = currentDate.getDate();

        const weeks = [];

        for (let i = 4; i >= 0; i--) {
            const startOfWeek = new Date(currentYear, currentMonth, currentDay - (currentDate.getDay() + 7 * i));
            const endOfWeek = new Date(currentYear, currentMonth, currentDay - (currentDate.getDay() - 6 + 7 * i));

            const startMonth = startOfWeek.toLocaleString('default', { month: 'short' });
            const endMonth = endOfWeek.toLocaleString('default', { month: 'short' });

            const startDate = startOfWeek.getDate();
            const endDate = endOfWeek.getDate();

            weeks.push(`W${5 - i}(${startMonth} ${startDate}-${endMonth} ${endDate})`);
        }
        return weeks;
    }
</script>